(self.webpackChunk=self.webpackChunk||[]).push([[8789],{8789:e=>{e.exports='<p>webpack can compile for multiple environments or <em>targets</em>. To understand what a <code>target</code> is in detail, read through <a href="/concepts/targets/">the targets concept page</a>.</p> <h2 id="target"><code>target</code><a href="#target" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a></h2> <p><code>string</code> <code>function (compiler) => string</code></p> <p>Instructs webpack to target a specific environment. Defaults to <code>\'browserslist\'</code> or to <code>\'web\'</code> when no browserslist configuration was found.</p> <h3 id="string"><code>string</code><a href="#string" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a></h3> <p>The following string values are supported via <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a>:</p> <table> <thead> <tr> <th>Option</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>async-node</code></p><p class="description mobile">Compile for usage in a Node.js-like environment (uses <code>fs</code> and <code>vm</code> to load chunks asynchronously)</p><p></p></div></td> <td class="description desktop">Compile for usage in a Node.js-like environment (uses <code>fs</code> and <code>vm</code> to load chunks asynchronously)</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>electron-main</code></p><p class="description mobile">Compile for <a href="https://electronjs.org/">Electron</a> for main process.</p><p></p></div></td> <td class="description desktop">Compile for <a href="https://electronjs.org/">Electron</a> for main process.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>electron-renderer</code></p><p class="description mobile">Compile for <a href="https://electronjs.org/">Electron</a> for renderer process, providing a target using <code>JsonpTemplatePlugin</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.</p><p></p></div></td> <td class="description desktop">Compile for <a href="https://electronjs.org/">Electron</a> for renderer process, providing a target using <code>JsonpTemplatePlugin</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>electron-preload</code></p><p class="description mobile">Compile for <a href="https://electronjs.org/">Electron</a> for renderer process, providing a target using <code>NodeTemplatePlugin</code> with <code>asyncChunkLoading</code> set to <code>true</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.</p><p></p></div></td> <td class="description desktop">Compile for <a href="https://electronjs.org/">Electron</a> for renderer process, providing a target using <code>NodeTemplatePlugin</code> with <code>asyncChunkLoading</code> set to <code>true</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>node</code></p><p class="description mobile">Compile for usage in a Node.js-like environment (uses Node.js <code>require</code> to load chunks)</p><p></p></div></td> <td class="description desktop">Compile for usage in a Node.js-like environment (uses Node.js <code>require</code> to load chunks)</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>node-webkit</code></p><p class="description mobile">Compile for usage in WebKit and uses JSONP for chunk loading. Allows importing of built-in Node.js modules and <a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a> (experimental)</p><p></p></div></td> <td class="description desktop">Compile for usage in WebKit and uses JSONP for chunk loading. Allows importing of built-in Node.js modules and <a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a> (experimental)</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>web</code></p><p class="description mobile">Compile for usage in a browser-like environment <strong>(default)</strong></p><p></p></div></td> <td class="description desktop">Compile for usage in a browser-like environment <strong>(default)</strong></td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>webworker</code></p><p class="description mobile">Compile as WebWorker</p><p></p></div></td> <td class="description desktop">Compile as WebWorker</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>browserslist</code></p><p class="description mobile">Infer a platform and the ES-features from a browserslist-config</p><p></p></div></td> <td class="description desktop">Infer a platform and the ES-features from a browserslist-config</td> </tr> </tbody> </table> <p>For example, when the <code>target</code> is set to <code>"electron-main"</code>, webpack includes multiple electron specific variables. For more information on which templates and externals are used, you can refer to webpack\'s <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js#L148-L183">source code</a>.</p> <h4 id="browserslist"><code>browserslist</code><a href="#browserslist" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a></h4> <p>If a project has a browserslist config, then webpack will use it for:</p> <ul> <li>Determinate ES-features that may be used to generate a runtime-code (all the chunks and modules are wrapped by runtime code).</li> <li>Infer an environment (e.g: <code>last 2 node versions</code> the same as <code>target: "node"</code> with some <a href="/configuration/output/#outputenvironment"><code>output.environment</code></a> settings).</li> </ul> <p>Supported browserslist values:</p> <ul> <li><code>browserslist</code> - use automatically resolved browserslist config and environment (from the nearest <code>package.json</code> or <code>BROWSERSLIST</code> environment variable)</li> <li><code>browserslist:modern</code> - use <code>modern</code> environment from automatically resolved browserslist config</li> <li><code>browserslist:last 2 versions</code> - use an explicit browserslist query (config will be ignored)</li> <li><code>browserslist:/path/to/config</code> - explicitly specify browserslist config</li> <li><code>browserslist:/path/to/config:modern</code> - explicitly specify browserslist config and an environment</li> </ul> <h3 id="function"><code>function</code><a href="#function" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a></h3> <p>If a function is passed, then it will be called with the compiler as a parameter. Set <code>target</code> to a <code>function</code> if none of the predefined targets from the list above meet your needs.</p> <p>For example, if you don\'t want any of the plugins applied:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token function-variable function">target</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">undefined</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Or you can apply specific plugins you want:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token function-variable function">target</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">\'web\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> '}}]);